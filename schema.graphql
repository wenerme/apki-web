"""
A signed eight-byte integer. The upper big integer values are greater than the
max value for a JavaScript number. Therefore all big integers will be output as
strings and not numbers.
"""
scalar BigInt

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Mirror implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: BigInt!
  createdAt: Datetime
  updatedAt: Datetime
  deletedAt: Datetime
  name: String
  location: String
  bandwidth: String
  url: String
  urls: [String]
  lastUpdated: Datetime
  lastError: String
  lastRefreshDuration: BigInt
  host: String
}

"""
A condition to be used against `Mirror` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input MirrorCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `deletedAt` field."""
  deletedAt: Datetime

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `location` field."""
  location: String

  """Checks for equality with the object’s `bandwidth` field."""
  bandwidth: String

  """Checks for equality with the object’s `url` field."""
  url: String

  """Checks for equality with the object’s `urls` field."""
  urls: [String]

  """Checks for equality with the object’s `lastUpdated` field."""
  lastUpdated: Datetime

  """Checks for equality with the object’s `lastError` field."""
  lastError: String

  """Checks for equality with the object’s `lastRefreshDuration` field."""
  lastRefreshDuration: BigInt

  """Checks for equality with the object’s `host` field."""
  host: String
}

"""A connection to a list of `Mirror` values."""
type MirrorsConnection {
  """A list of `Mirror` objects."""
  nodes: [Mirror!]!

  """
  A list of edges which contains the `Mirror` and cursor to aid in pagination.
  """
  edges: [MirrorsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Mirror` you could get from the connection."""
  totalCount: Int!
}

"""A `Mirror` edge in the connection."""
type MirrorsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Mirror` at the end of the edge."""
  node: Mirror!
}

"""Methods to use when ordering `Mirror`."""
enum MirrorsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  DELETED_AT_ASC
  DELETED_AT_DESC
  NAME_ASC
  NAME_DESC
  LOCATION_ASC
  LOCATION_DESC
  BANDWIDTH_ASC
  BANDWIDTH_DESC
  URL_ASC
  URL_DESC
  URLS_ASC
  URLS_DESC
  LAST_UPDATED_ASC
  LAST_UPDATED_DESC
  LAST_ERROR_ASC
  LAST_ERROR_DESC
  LAST_REFRESH_DURATION_ASC
  LAST_REFRESH_DURATION_DESC
  HOST_ASC
  HOST_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

type PackageIndex implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: BigInt!
  createdAt: Datetime
  updatedAt: Datetime
  deletedAt: Datetime
  branch: String
  repo: String
  arch: String
  name: String
  version: String
  size: BigInt
  installSize: BigInt
  description: String
  url: String
  license: String
  maintainer: String
  origin: String
  buildTime: Datetime
  commit: String
  key: String
  path: String
  depends: [String]
  provides: [String]
  installIf: [String]
}

"""
A condition to be used against `PackageIndex` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input PackageIndexCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `deletedAt` field."""
  deletedAt: Datetime

  """Checks for equality with the object’s `branch` field."""
  branch: String

  """Checks for equality with the object’s `repo` field."""
  repo: String

  """Checks for equality with the object’s `arch` field."""
  arch: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `version` field."""
  version: String

  """Checks for equality with the object’s `size` field."""
  size: BigInt

  """Checks for equality with the object’s `installSize` field."""
  installSize: BigInt

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `url` field."""
  url: String

  """Checks for equality with the object’s `license` field."""
  license: String

  """Checks for equality with the object’s `maintainer` field."""
  maintainer: String

  """Checks for equality with the object’s `origin` field."""
  origin: String

  """Checks for equality with the object’s `buildTime` field."""
  buildTime: Datetime

  """Checks for equality with the object’s `commit` field."""
  commit: String

  """Checks for equality with the object’s `key` field."""
  key: String

  """Checks for equality with the object’s `path` field."""
  path: String

  """Checks for equality with the object’s `depends` field."""
  depends: [String]

  """Checks for equality with the object’s `provides` field."""
  provides: [String]

  """Checks for equality with the object’s `installIf` field."""
  installIf: [String]
}

"""A connection to a list of `PackageIndex` values."""
type PackageIndicesConnection {
  """A list of `PackageIndex` objects."""
  nodes: [PackageIndex!]!

  """
  A list of edges which contains the `PackageIndex` and cursor to aid in pagination.
  """
  edges: [PackageIndicesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `PackageIndex` you could get from the connection."""
  totalCount: Int!
}

"""A `PackageIndex` edge in the connection."""
type PackageIndicesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PackageIndex` at the end of the edge."""
  node: PackageIndex!
}

"""Methods to use when ordering `PackageIndex`."""
enum PackageIndicesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  DELETED_AT_ASC
  DELETED_AT_DESC
  BRANCH_ASC
  BRANCH_DESC
  REPO_ASC
  REPO_DESC
  ARCH_ASC
  ARCH_DESC
  NAME_ASC
  NAME_DESC
  VERSION_ASC
  VERSION_DESC
  SIZE_ASC
  SIZE_DESC
  INSTALL_SIZE_ASC
  INSTALL_SIZE_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  URL_ASC
  URL_DESC
  LICENSE_ASC
  LICENSE_DESC
  MAINTAINER_ASC
  MAINTAINER_DESC
  ORIGIN_ASC
  ORIGIN_DESC
  BUILD_TIME_ASC
  BUILD_TIME_DESC
  COMMIT_ASC
  COMMIT_DESC
  KEY_ASC
  KEY_DESC
  PATH_ASC
  PATH_DESC
  DEPENDS_ASC
  DEPENDS_DESC
  PROVIDES_ASC
  PROVIDES_DESC
  INSTALL_IF_ASC
  INSTALL_IF_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type PackageName {
  id: BigInt
  createdAt: Datetime
  updatedAt: Datetime
  deletedAt: Datetime
  branch: String
  repo: String
  arch: String
  name: String
  version: String
  size: BigInt
  installSize: BigInt
  description: String
  url: String
  license: String
  maintainer: String
  origin: String
  buildTime: Datetime
  commit: String
  key: String
  path: String
  depends: [String]
  provides: [String]
  installIf: [String]
}

"""
A condition to be used against `PackageName` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input PackageNameCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `deletedAt` field."""
  deletedAt: Datetime

  """Checks for equality with the object’s `branch` field."""
  branch: String

  """Checks for equality with the object’s `repo` field."""
  repo: String

  """Checks for equality with the object’s `arch` field."""
  arch: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `version` field."""
  version: String

  """Checks for equality with the object’s `size` field."""
  size: BigInt

  """Checks for equality with the object’s `installSize` field."""
  installSize: BigInt

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `url` field."""
  url: String

  """Checks for equality with the object’s `license` field."""
  license: String

  """Checks for equality with the object’s `maintainer` field."""
  maintainer: String

  """Checks for equality with the object’s `origin` field."""
  origin: String

  """Checks for equality with the object’s `buildTime` field."""
  buildTime: Datetime

  """Checks for equality with the object’s `commit` field."""
  commit: String

  """Checks for equality with the object’s `key` field."""
  key: String

  """Checks for equality with the object’s `path` field."""
  path: String

  """Checks for equality with the object’s `depends` field."""
  depends: [String]

  """Checks for equality with the object’s `provides` field."""
  provides: [String]

  """Checks for equality with the object’s `installIf` field."""
  installIf: [String]
}

"""A connection to a list of `PackageName` values."""
type PackageNamesConnection {
  """A list of `PackageName` objects."""
  nodes: [PackageName!]!

  """
  A list of edges which contains the `PackageName` and cursor to aid in pagination.
  """
  edges: [PackageNamesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `PackageName` you could get from the connection."""
  totalCount: Int!
}

"""A `PackageName` edge in the connection."""
type PackageNamesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PackageName` at the end of the edge."""
  node: PackageName!
}

"""Methods to use when ordering `PackageName`."""
enum PackageNamesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  DELETED_AT_ASC
  DELETED_AT_DESC
  BRANCH_ASC
  BRANCH_DESC
  REPO_ASC
  REPO_DESC
  ARCH_ASC
  ARCH_DESC
  NAME_ASC
  NAME_DESC
  VERSION_ASC
  VERSION_DESC
  SIZE_ASC
  SIZE_DESC
  INSTALL_SIZE_ASC
  INSTALL_SIZE_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  URL_ASC
  URL_DESC
  LICENSE_ASC
  LICENSE_DESC
  MAINTAINER_ASC
  MAINTAINER_DESC
  ORIGIN_ASC
  ORIGIN_DESC
  BUILD_TIME_ASC
  BUILD_TIME_DESC
  COMMIT_ASC
  COMMIT_DESC
  KEY_ASC
  KEY_DESC
  PATH_ASC
  PATH_DESC
  DEPENDS_ASC
  DEPENDS_DESC
  PROVIDES_ASC
  PROVIDES_DESC
  INSTALL_IF_ASC
  INSTALL_IF_DESC
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `Mirror`."""
  allMirrors(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Mirror`."""
    orderBy: [MirrorsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MirrorCondition
  ): MirrorsConnection

  """Reads and enables pagination through a set of `PackageIndex`."""
  allPackageIndices(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PackageIndex`."""
    orderBy: [PackageIndicesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PackageIndexCondition
  ): PackageIndicesConnection

  """Reads and enables pagination through a set of `PackageName`."""
  allPackageNames(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PackageName`."""
    orderBy: [PackageNamesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PackageNameCondition
  ): PackageNamesConnection

  """Reads and enables pagination through a set of `Setting`."""
  allSettings(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Setting`."""
    orderBy: [SettingsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SettingCondition
  ): SettingsConnection
  mirrorById(id: BigInt!): Mirror
  packageIndexById(id: BigInt!): PackageIndex
  settingById(id: BigInt!): Setting
  settingByName(name: String!): Setting

  """Reads a single `Mirror` using its globally unique `ID`."""
  mirror(
    """The globally unique `ID` to be used in selecting a single `Mirror`."""
    nodeId: ID!
  ): Mirror

  """Reads a single `PackageIndex` using its globally unique `ID`."""
  packageIndex(
    """
    The globally unique `ID` to be used in selecting a single `PackageIndex`.
    """
    nodeId: ID!
  ): PackageIndex

  """Reads a single `Setting` using its globally unique `ID`."""
  setting(
    """The globally unique `ID` to be used in selecting a single `Setting`."""
    nodeId: ID!
  ): Setting
}

type Setting implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: BigInt!
  createdAt: Datetime
  updatedAt: Datetime
  deletedAt: Datetime
  name: String
  value: JSON
  version: String
}

"""
A condition to be used against `Setting` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input SettingCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `deletedAt` field."""
  deletedAt: Datetime

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `value` field."""
  value: JSON

  """Checks for equality with the object’s `version` field."""
  version: String
}

"""A connection to a list of `Setting` values."""
type SettingsConnection {
  """A list of `Setting` objects."""
  nodes: [Setting!]!

  """
  A list of edges which contains the `Setting` and cursor to aid in pagination.
  """
  edges: [SettingsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Setting` you could get from the connection."""
  totalCount: Int!
}

"""A `Setting` edge in the connection."""
type SettingsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Setting` at the end of the edge."""
  node: Setting!
}

"""Methods to use when ordering `Setting`."""
enum SettingsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  DELETED_AT_ASC
  DELETED_AT_DESC
  NAME_ASC
  NAME_DESC
  VALUE_ASC
  VALUE_DESC
  VERSION_ASC
  VERSION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}
